rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* ─────────── Helper Functions ─────────── */
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Enforce pagination limits to prevent cost attacks
    function hasReasonableLimit(maxLimit) {
      return request.query.limit != null
             && request.query.limit is int
             && request.query.limit <= maxLimit
             && request.query.limit > 0;
    }

    // Ensure queries are properly ordered for efficient indexing
    function orderedByCreatedDesc() {
      return request.query.orderBy.size() == 1
             && request.query.orderBy[0].field == 'createdAt'
             && request.query.orderBy[0].direction == 'desc';
    }

    // Validate string content length and presence
    function validContent(maxLength) {
      return request.resource.data.content is string
             && request.resource.data.content.size() > 0
             && request.resource.data.content.size() <= maxLength;
    }



    /* ─────────── POSTS COLLECTION ─────────── */
    match /posts/{postId} {
      
      // READ: Single post by ID (efficient)
      allow get: if isSignedIn();

      // LIST: Step 1 - Add back authentication requirement
      allow list: if isSignedIn();

      // CREATE: Only authenticated users can create posts
      // NOTE: Rate limiting is primarily handled client-side and in application logic
      // Firestore rules are limited for complex rate limiting across documents
      allow create: if isSignedIn()
                    && request.resource.data.userId == request.auth.uid
                    && validContent(250)  // Max 250 characters
                    && request.resource.data.username is string
                    && request.resource.data.username.size() >= 4
                    && request.resource.data.username.size() <= 12
                    && request.resource.data.createdAt == request.time
                    && request.resource.data.likes == 0
                    && request.resource.data.commentsCount == 0;

      // UPDATE: Only post owner can update content
      allow update: if isSignedIn()
                    && resource.data.userId == request.auth.uid
                    && validContent(250)
                    && request.resource.data.updatedAt == request.time
                    // Prevent modification of system fields
                    && request.resource.data.userId == resource.data.userId
                    && request.resource.data.username == resource.data.username
                    && request.resource.data.createdAt == resource.data.createdAt;

      // DELETE: Only post owner or admin can delete
      allow delete: if isSignedIn()
                    && (resource.data.userId == request.auth.uid || isAdmin());
    }

    /* ─────────── COMMENTS COLLECTION ─────────── */
    match /comments/{commentId} {
      
      // READ: Single comment by ID
      allow get: if isSignedIn();

      // LIST: Only comments for a specific post (prevent full collection reads)
      allow list: if isSignedIn()
                  && request.query.where.size() >= 1
                  && 'postId' in request.query.where
                  && orderedByCreatedDesc()
                  && hasReasonableLimit(100);  // Max 100 comments per query

      // CREATE: Only authenticated users can comment
      // NOTE: Rate limiting for comments is handled client-side to prevent spam
      allow create: if isSignedIn()
                    && request.resource.data.userId == request.auth.uid
                    && validContent(250)  // Max 250 characters
                    && request.resource.data.postId is string
                    && request.resource.data.username is string
                    && request.resource.data.username.size() >= 4
                    && request.resource.data.username.size() <= 12
                    && request.resource.data.createdAt == request.time;

      // UPDATE: Only comment owner can update
      allow update: if isSignedIn()
                    && resource.data.userId == request.auth.uid
                    && validContent(250)
                    // Prevent modification of system fields
                    && request.resource.data.userId == resource.data.userId
                    && request.resource.data.postId == resource.data.postId
                    && request.resource.data.username == resource.data.username
                    && request.resource.data.createdAt == resource.data.createdAt;

      // DELETE: Only comment owner or admin can delete
      allow delete: if isSignedIn()
                    && (resource.data.userId == request.auth.uid || isAdmin());
    }

    /* ─────────── USERS COLLECTION ─────────── */
    match /users/{userId} {
      
      // READ: Allow reading for authenticated users and username lookups
      allow get: if isSignedIn();
      
      // LIST: Allow username availability checks (unauthenticated) and admin access
      allow list: if (
                    // Admin can list all users (when authenticated)
                    (isSignedIn() && isAdmin() && hasReasonableLimit(100))
                    ||
                    // Username availability checks - specific pattern only
                    (request.query.where.size() == 1 
                     && request.query.limit == 1)
                  );

      // CREATE: Only during registration
      allow create: if isOwner(userId)
                    && request.resource.data.uid == request.auth.uid
                    && request.resource.data.email is string
                    && request.resource.data.username is string
                    && request.resource.data.username.size() >= 4
                    && request.resource.data.username.size() <= 12
                    && request.resource.data.createdAt == request.time;

      // UPDATE: Only user can update their own profile OR admin can update any profile
      allow update: if (isOwner(userId)
                        // User updating their own profile
                        && request.resource.data.uid == resource.data.uid
                        && request.resource.data.email == resource.data.email
                        && request.resource.data.createdAt == resource.data.createdAt
                        // Allow updating blocked users list for personal content filtering
                        && (!('blockedUsers' in request.resource.data) || 
                            request.resource.data.blockedUsers is list))
                    ||
                    (isAdmin()
                        // Admin can update user roles but not core identity fields
                        && request.resource.data.uid == resource.data.uid
                        && request.resource.data.email == resource.data.email
                        && request.resource.data.username == resource.data.username
                        && request.resource.data.createdAt == resource.data.createdAt);

      // DELETE: Only user can delete their own profile
      allow delete: if isOwner(userId);
    }

    /* ─────────── SECURITY: Block everything else ─────────── */
    match /{document=**} {
      allow read, write: if false;  // Explicit deny for any other collections
    }
  }
}
