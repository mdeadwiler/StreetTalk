rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /* Helpers */
    function isSignedIn() { return request.auth != null; }
    function isOwner(userId) { return isSignedIn() && request.auth.uid == userId; }
    function isAdmin() { return isSignedIn() && request.auth.token.admin == true; }

    // If a limit is provided, it must be sane; if missing, allow (client should still send one).
    function hasLimit(max) {
      return !('limit' in request.query) ||
        (request.query.limit is int && request.query.limit > 0 && request.query.limit <= max);
    }

    function validContent(maxLen) {
      return request.resource.data.content is string &&
             request.resource.data.content.size() > 0 &&
             request.resource.data.content.size() <= maxLen;
    }

    /* POSTS */
    match /posts/{postId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn() && hasLimit(50);

      allow create: if isSignedIn()
        && request.resource.data.userId == request.auth.uid
        && validContent(250)
        && request.resource.data.username is string
        && request.resource.data.username.size() >= 4
        && request.resource.data.username.size() <= 12
        && request.resource.data.createdAt == request.time
        && request.resource.data.likes == 0
        && request.resource.data.commentsCount == 0;

      // Two allowed update paths:
      // 1) Owner edits content only (must set updatedAt == server time)
      // 2) Atomic +1 to commentsCount only
      allow update: if isSignedIn() && (
        (
          resource.data.userId == request.auth.uid
          && validContent(250)
          && request.resource.data.updatedAt == request.time
          // lock identity/system fields
          && request.resource.data.userId == resource.data.userId
          && request.resource.data.username == resource.data.username
          && request.resource.data.createdAt == resource.data.createdAt
          && request.resource.data.likes == resource.data.likes
          && request.resource.data.commentsCount == resource.data.commentsCount
        )
        ||
        (
          // Strictly allow only commentsCount to change, and only by +1
          request.resource.data.diff(resource.data).addedKeys().size() == 0
          && request.resource.data.diff(resource.data).removedKeys().size() == 0
          && request.resource.data.diff(resource.data).changedKeys().size() == 1
          && request.resource.data.diff(resource.data).changedKeys()[0] == 'commentsCount'
          && request.resource.data.commentsCount == resource.data.commentsCount + 1
        )
      );

      allow delete: if isSignedIn()
        && (resource.data.userId == request.auth.uid || isAdmin());
    }

    /* COMMENTS (nested) */
    match /posts/{postId}/comments/{commentId} {
      allow get: if isSignedIn();
      // Safe: path already scopes to one post
      allow list: if isSignedIn() && hasLimit(50);

      allow create: if isSignedIn()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.postId == postId
        && validContent(250)
        && request.resource.data.username is string
        && request.resource.data.username.size() >= 4
        && request.resource.data.username.size() <= 12
        && request.resource.data.createdAt == request.time;

      allow update: if isSignedIn()
        && resource.data.userId == request.auth.uid
        && validContent(250)
        && request.resource.data.updatedAt == request.time
        // identity fields immutable
        && request.resource.data.userId == resource.data.userId
        && request.resource.data.postId == resource.data.postId
        && request.resource.data.username == resource.data.username
        && request.resource.data.createdAt == resource.data.createdAt;

      allow delete: if isSignedIn();
    }

    /* USERS */
    match /users/{userId} {
      allow get: if isSignedIn();

      // Allow username lookups for login and registration
      allow list: if hasLimit(10);

      allow create: if isOwner(userId)
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.email is string
        && request.resource.data.username is string
        && request.resource.data.username.size() >= 4
        && request.resource.data.username.size() <= 12
        && request.resource.data.createdAt == request.time;

      allow update: if (
        // user updating their own profile; identity fields locked
        isOwner(userId)
        && request.resource.data.uid == resource.data.uid
        && request.resource.data.email == resource.data.email
        && request.resource.data.createdAt == resource.data.createdAt
        && (!('blockedUsers' in request.resource.data) || request.resource.data.blockedUsers is list)
      ) || (
        // admin edits (e.g., roles/flags) but cannot alter identity fields
        isAdmin()
        && request.resource.data.uid == resource.data.uid
        && request.resource.data.email == resource.data.email
        && request.resource.data.username == resource.data.username
        && request.resource.data.createdAt == resource.data.createdAt
      );

      allow delete: if isOwner(userId);
    }



    /* Deny everything else */
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
